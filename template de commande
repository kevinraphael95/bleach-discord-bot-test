# ────────────────────────────────────────────────────────────────────────────────
# 📌 nom_du_fichier.py — Commande interactive !nom_de_la_commande
# Objectif : Description courte de la commande
# Catégorie : Général, Yu-Gi-Oh ou Autre
# Accès : Public / Privé / Modérateur
# ────────────────────────────────────────────────────────────────────────────────

# ────────────────────────────────────────────────────────────────────────────────
# 📦 Imports nécessaires
# ────────────────────────────────────────────────────────────────────────────────
import discord
from discord.ext import commands
from discord.ui import View, Select
import json
import os
from utils.discord_utils import safe_send, safe_edit, safe_respond  # ✅ Utilisation des safe_

# ────────────────────────────────────────────────────────────────────────────────
# 📂 Chargement des données JSON (exemple)
# ────────────────────────────────────────────────────────────────────────────────
DATA_JSON_PATH = os.path.join("data", "data_file.json")

def load_data():
    with open(DATA_JSON_PATH, "r", encoding="utf-8") as f:
        return json.load(f)

# ────────────────────────────────────────────────────────────────────────────────
# 🎛️ UI — Premier menu interactif
# ────────────────────────────────────────────────────────────────────────────────
class FirstSelectView(View):
    def __init__(self, bot, data):
        super().__init__(timeout=120)
        self.bot = bot
        self.data = data
        self.add_item(FirstSelect(self))

class FirstSelect(Select):
    def __init__(self, parent_view: FirstSelectView):
        self.parent_view = parent_view
        options = [discord.SelectOption(label=key, value=key) for key in self.parent_view.data.keys()]
        super().__init__(placeholder="Sélectionne une option", options=options)

    async def callback(self, interaction: discord.Interaction):
        selected_key = self.values[0]
        new_view = SecondSelectView(self.parent_view.bot, self.parent_view.data, selected_key)
        await safe_edit(
            interaction.message,
            content=f"Option sélectionnée : **{selected_key}**\nChoisis maintenant une sous-option :",
            embed=None,
            view=new_view
        )

# ────────────────────────────────────────────────────────────────────────────────
# 🎛️ UI — Deuxième menu interactif
# ────────────────────────────────────────────────────────────────────────────────
class SecondSelectView(View):
    def __init__(self, bot, data, key):
        super().__init__(timeout=120)
        self.bot = bot
        self.data = data
        self.key = key
        self.add_item(SecondSelect(self))

class SecondSelect(Select):
    def __init__(self, parent_view: SecondSelectView):
        self.parent_view = parent_view
        sub_options = list(self.parent_view.data[self.parent_view.key].keys())
        options = [discord.SelectOption(label=sub, value=sub) for sub in sub_options]
        super().__init__(placeholder="Sélectionne une sous-option", options=options)

    async def callback(self, interaction: discord.Interaction):
        key = self.parent_view.key
        sub_key = self.values[0]
        infos = self.parent_view.data[key][sub_key]

        embed = discord.Embed(
            title=f"Informations pour {sub_key} ({key})",
            color=discord.Color.blue()
        )
        for field_name, field_value in infos.items():
            value = "\n".join(f"• {item}" for item in field_value) if isinstance(field_value, list) else str(field_value)
            embed.add_field(name=field_name.capitalize(), value=value, inline=False)

        await safe_edit(
            interaction.message,
            content=None,
            embed=embed,
            view=None
        )

# ────────────────────────────────────────────────────────────────────────────────
# 🧠 Cog principal
# ────────────────────────────────────────────────────────────────────────────────
class NomDeLaCommande(commands.Cog):
    """
    Commande !nom_de_la_commande — Description courte
    """

    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.command(
        name="nom_de_la_commande",
        help="Description de la commande.",
        description="Description détaillée de la commande."
    )
    async def nom_de_la_commande(self, ctx: commands.Context):
        """Commande principale avec menu interactif."""
        try:
            data = load_data()
            view = FirstSelectView(self.bot, data)
            await safe_send(ctx.channel, "Choisis une option :", view=view)
        except Exception as e:
            print(f"[ERREUR nom_de_la_commande] {e}")
            await safe_send(ctx.channel, "❌ Une erreur est survenue lors du chargement des données.")

# ────────────────────────────────────────────────────────────────────────────────
# 🔌 Setup du Cog
# ────────────────────────────────────────────────────────────────────────────────
async def setup(bot: commands.Bot):
    cog = NomDeLaCommande(bot)
    for command in cog.get_commands():
        if not hasattr(command, "category"):
            command.category = "Autre"  # ✅ Défaut = Autre
    await bot.add_cog(cog)
